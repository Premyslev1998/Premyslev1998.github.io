//Замечание!
//В структуре конкретного проекта, файлы с разрешением - ".cpp", содержат в себе описание
//функций/методов, а файлы с разрешением - ".h" - их объявление.

// BEFORE BUILDING //
demo
	program.asm
interpreter //ВМ (эмулятор) "импровизированного" языка ассмблера.
	definies.h //Словарь, содерж. список ОП-кодов всех прерываний ("MagicNumbers").
	main.cpp //Файл main.cpp работает с файлами имеющими разрешения - ".ve" 
	//и содержащими байт-коды.
	//Замечание!
	//Функционал main.cpp:
	//- Перевод строк байт-кодов в числа;
	//- Парсинг (синтаксичесий анализ) прерываний;
	//- Парсинг команд. 	
	Makefile //Описание см. выше. 
params
	opcodes.cfg //Словарь, содерж. список ОП-кодов всех команд.
	//При задании ОП-кода (байт-кода) команды непосредственно в программе,
	//базовая спецификация (описанная в файле - SPECIFICATION.docx) мб измениться,
	//что ни есть хорошо => был создан данный словарь.
translator //Программный модуль, забирающий "ассемблерны код" и генерирущий на его основе,
                         //исполняемый ve-файл, содержащий байт-коды. 
	analyzer.cpp
	//Замечание!
	//Функционал analyzer.cpp:
	//- Загрузка листинга программы (program.asm);
	//- Обработка программы, с помещением результата в массив памяти. 
	analyzer.h
	labels.cpp
	//Замечание!
	//Функционал labels.cpp:
	//- Проверка, является ли команда меткой;
	//- Добавление метки и адреса на котором она стоит;
	//- Добавление адреса, на который надо подставить адрес метки;
	//- Расстановка меток по нужным адресам.
	labels.h
	main.cpp //Корневой файл для директории - ../translator, принимающий на вход
	//файл program.asm и генерирующий исполняемый файл - program.ve.
	Makefile //Описание см. выше. 
	memory.cpp
	//Замечание!
	//Функционал memory.cpp:
	//- Проверка, является ли аргумент памятью;
	//- Кладёт в массив памяти (memory_=new unsigned char [5000]) байт;
	//- Кладёт в массив памяти целое число;
	//- Кладёт в память дробное число;
	//- Кладёт в память целый регистр;
	//- Кладёт в память дробный регистр;
	//- Выводит содержимое памяти на экран;
	//- Сохраняет память в двоичный файл;
	//- Возвращает текущий размер памяти;
	//- Кладет в массив памяти 2-ух байтное целое число.
	memory.h
	misc.cpp //Конкретный файл содержит служебные функции для работы со 
	                      //строковыми/числовыми данными, а также метод для вывода и-ии об ошибке.  
	//Замечание!
	//Функционал misc.cpp:
	//- Преобразование числа в строку;
	//- Преобразование строки в число;
	//- Преобразование строки в дробное число;
	//- Вывод сообщения об ошибке;
	//- Проверка является ли (строка) целым числом;
	//- Проверка является ли (строка) дробным числом;
	//- "Разбитие" строки на части.
	misc.h
	regs.cpp
	//Замечание!
	//Функционал regs.cpp:
	//- Проверка, является ли целым регистр;
	//- Проверка, является ли дробным регистр;
	//- Возвращает номер целого регистра (инициализирует целый регистр);
	//- Возвращает номер дробного регистра (инициализирует дробный регистр).
	regs.h
	unit-tests.cpp //Конкретный файл содержит описание юнит-тестов ф-ий,
		        //описанных в файле - misc.cpp.
README
// END //

// AFTER BUILDING //
demo
	program.asm
	program.ve
interpreter
	definies.h
	main.cpp
	main.o
	Makefile
	vavaja.exe
params
	opcodes.cfg
translator
	analyzer.cpp
	analyzer.h
	analyzer.o
	labels.cpp
	labels.h
	labels.o
	main.cpp
	main.o
	Makefile
	memory.cpp
	memory.h
	memory.o
	misc.cpp
	misc.h
	misc.o
	regs.cpp
	regs.h
	regs.o
	unit-tests.cpp
	vavajatr.exe
README
// END //