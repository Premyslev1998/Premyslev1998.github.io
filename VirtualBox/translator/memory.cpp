#include "memory.h"

//------------------------------------------------------------------------------------------
Memory::Memory(Registers *regs)
{
	regs_=regs;
	memory_=new unsigned char [5000]; //Выделяем память под байт-коды
	cur_=0;
}

//------------------------------------------------------------------------------------------
Memory::~Memory()
{
	delete [] memory_;
}

//------------------------------------------------------------------------------------------
bool Memory::isMemory(std::string &str)
{
	if (str.length()==1) return false;
    if (str[0]=='%')
    {
        str.erase(0,1);
        return true;
    }
    return false;
}

//------------------------------------------------------------------------------------------
//Конкретная ф-ия кладет байт в массив байт-кодов.
void Memory::putByte(const unsigned char byte)
{
	*(memory_+cur_)=byte; //Операция обращения по адресу. Данная о-ия предн. для того, чтобы когда мы кладем какое-либо значение
	//в массив с байт-кодами, мы обращались к текущему адресу.
    cur_++;
}

//------------------------------------------------------------------------------------------
//Конкретная ф-ия кладет числовое значение в массив байт-кодов.
void Memory::putNum(const std::string num)
{
    *((short*)(memory_+cur_))=atoi(num);
    cur_+=2;
    //Замечание!
    //В синтаксисе языка c++, символы занимают 1 байт, а
    //а тип short - 2 байта. Поэтому в данной ф-ии мы производим
    //приведение типов.
}

//Замечание!
//В целях экономии времени описание, последующих ф-ий (до ф-ии - print),
//не будет представленно, т.к. по принципу работы
//они почти полностью соответствуют ф-ям: putByte/putNum.

void Memory::putTwoBytes(unsigned char addr, short num)
{
	*((short*)(memory_+addr))=num;
}

//------------------------------------------------------------------------------------------
void Memory::putFloat(const std::string num)
{
    *((float*)(memory_+cur_))=atof(num);
    cur_+=4;
}

//------------------------------------------------------------------------------------------
void Memory::putReg(const std::string reg)
{
    *(memory_+cur_)=regs_->getReg(reg);
    cur_++;
}

//------------------------------------------------------------------------------------------
void Memory::putRegFloat(const std::string reg)
{
    *(memory_+cur_)=regs_->getRegFloat(reg);
    cur_++;
}

//------------------------------------------------------------------------------------------
void Memory::print() const
{
	for (int i=0;i<cur_;i++)
    {
        const int j=(*(char*)(memory_+i));
        std::cout << j << " ";
    }
	std::cout << "\n";
}

//------------------------------------------------------------------------------------------
void Memory::save(const std::string fname) const
{
	std::ofstream out(fname,std::ofstream::binary);
    out.write((char*)memory_,cur_);
    out.close();
}

//-------------------------------------------------------------------
unsigned char Memory::getCurrent() const
{
	return cur_;
}