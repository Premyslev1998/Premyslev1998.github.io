//Замечание!
//В результате выполнения данной л/р будет описано 2 программы:
//П1 - транслятор. Мы в нее забираем "ассемблерны код" (см. ниже). Пример "ассемблерного кода":
//mov ah %5... И далее транслятор выдает/генерирует файл, содержащий байт-коды, т.е. исполняемый файл.
//П2 - ВМ, или интерпритатор. Это то, что будет выполнять этот самый код.
//Пример:
mov ah bh  //Команда
int     20

//Результат (в результирующем файле)
10   
20
3
4
8
20

Архитектура ВМ
ВМ будет поддерживать несколько регистров, а также выполнять несколько команд.

ВМ - это устройство, которое эмулирует работу процессора (целиком компьютер) и не только...
Перечень компонентов, которые эмулирует ВМ:
	- Процессор;
	- Оперативная память;
	- Устройства ввода/вывода информации.

В рамках данной л/р - ВМ будет эмулировать работу процессора в 16-битной разрядной системе.
Это озночает, что процессор будет работать с памятью у которой адресация составляет 16 бит.
Иными словами мы будем писать программу, которая будет эмулировать различные процессы с указаыннми
регистами (ячейками памяти).

У ВМ будут регистры общего назначения:

//Замечание!
//На уровне ПО работа, как правило, осуществлется с переменными, а на уровне
//АО работа происходит с регистрами. Они предназначены, для того, чтобы хранить в них информацию.  

целые //Регистры в которых мы будем хранить целые числа.
//В 2-ух байтовых регистрах мб хранить числа в диапозоне - 0 - 2^16 (2 байта - это 8 бит).	
(2 байта)	
ah			
bh			
ch			
dh			
eh			

вещественные
(4 байта)
eax
ebx
ecx
edx
eex

Кроме регистров общего назначения в ВМ будут находиться регистры специального назначения:

//Замечание!
//Процессор работает с информацией, предоставляемой оперативной памятью (в каком-то смысле о/п - это массив). 
//У о/п имееются определенные адреса. Адресация, как правило, происходит по 1-му байту.
//Пример:
//0	1	2	3	4	5	//Ячейки памяти
//24	48	93	0	55	131	//Данные	 

sp - указатель на вершину стека (способ организации оперативной памяти, подробее см. в пред. л/р) целых чисел.
Данный регистр используется для работы с о/п, т.е. у процессора имеется такая спец. ячейка (sp), в которой
лежит указатель на вершину стека.
Пример:
1	23
2	18
3	55
4	60
5	30
6	0
7	0
8	0
9	0
10	0
11	0 
В данном примере вес регистра sp, будет равняться 5-ью байтам, а интерпретироваться - это будет, как то,
что на вершине стека у нас лежит число 30, по адресу 5.

esp - указатель на вершину стека вещественных чисел (точно такой же принцип, как и у регистра sp,
только для вещественных чисел).

//Замечание!
//Схема архитектуры работы о/п современных компьютеров:
//(1) О/п - в ней содержится код программы (в 1-ом месте), в другом месте лежат данные.
//Важно отметить, что и данные и команды в о/п представленны с пом. 0 и 1. Только данные - это числа,
//которые интерпретирует наша программа - это те "О/П"-коды, которые понимает процессор.
//Иными словами те 0 и 1-цы которые попадают на процессор и которые он выполняет.     

pc - указатель на текущую команду выполняемую процессором.
Пример:
1	10	//Значение
2	20	//Значение
3	0
4	0
5	0
6	0
7	0
8	0
9	0
10	0
11	1	//Начало программы	
12	3	//Операция сложения
13	1	//Аргумент (1), иначе адрес о/п из которого берется 1-ое число (10)
14	2	//Аргумент (2), иначе адрес о/п из которого берется 2-ое число (20)
15	3	//Тот адрес памяти в который будет помещен результат
16	0
Т.е. если мы запустим (в ВМ) команду - run 12, то у нас окажется в О/П, по адресу 3 число: 10+20 (30).
Это банальный пример работы О/П-кода на самом низком уровне.
Но! Вернемся к регистру pc. Т.к. pc - это указатель на текущую программу, то в данном примере
начальным его значением будет 12, иными словами команда 1, по адресу 12. 

//Далее пойдет описание команд.
//Замечание!
//Ниже, преимущественно представлено описание работы команд (с примерами). Полный,
//развернутый перечень того с чем могут работать команды, см. в файле - SPECIFICATION.docx. 

Команды:

mov 1 ah //Данная команда предназначена для перекладывания данных в регистр, переклад. данных
//из 1-ой ячейки (регистра) в другую, а также для перекладывания данных из регистра в О/П, либо из О/П в регистр.
Параметры команды - mov:
1 - что кладем;
eax - куда кладем; //Т.е. в данном примере значение 1 будет помещен в регистр - ah.

Пример переноса числа 25 из регистра ah в О/П, по адресу 5:

ah bh ch dh
25 25   0   0

mov ah %5   

1   2   3   4   5   6   7   8   9   10   11
0   0   0   0   25   0   0   0   0     0      0

//Замечание!
//Принцип работы, создаваемой ВМ, очень похож на принцип работы (архитектуру)
//языка ассемблера, который к пр. исп. в x86-архитектуре.

add 4 eh //Данная комнада предназначена для увеличения какого-то регистра на определенное число,
//либо на значение, которое содержится в другом регистре. Важно отметить, что при переполнении регистра,
//значение, на которое он был переполнен будет отбрасываться.

sub 6 dh  //Данная комнада предназначена для уменьшения какого-то регистра на определенное число,
//либо на значение, которое содержится в другом регистре.

mul ch //Данная команда умножает регистр ah на аргумент (результат в регистр ah или eax). 
//Аргумент мб числом или регистром.
Пример:

ah	bh	ch	dh	eh
2	4	5	3	1

mul ch

ah	bh	...
10 	4

div fh //Данная команда делит регистр ah на аргумент. Остаток о деления в eh. 
//Аргумент мб числом или регистром.
Пример:
ah bh ch dh eh
10 5    2    3    0

div 2

ah bh ch dh eh
5     5     2   3    0 

div ch
 
ah bh ch dh eh //В данном примере проиллюстрированы целочисленные регистры => (как описано ранее)
2     5     2   3    1 //остаток пойдет в eh.

...

//Замечание!
//Описание оставшихся команд/данных/..., см. в файле - SPECIFICATION.docx. 